[
  {
    "id": 1,
    "question": "What is `useState` and how does it work in React?",
    "answer": "`useState` is a React Hook that lets you add state to functional components. It returns an array with two values — the current state and a function to update it. When you call the update function, React re-renders the component with the new state value."
  },
  {
    "id": 2,
    "question": "What is the purpose of `useEffect` in React?",
    "answer": "`useEffect` allows you to perform side effects in functional components, such as fetching data, setting up subscriptions, or manually changing the DOM. It runs after the component renders and can re-run based on specified dependencies."
  },
  {
    "id": 3,
    "question": "What is a custom hook in React and when should you use one?",
    "answer": "A custom hook is a reusable function that starts with `use` and can contain other React hooks inside it. You should create a custom hook when you want to reuse stateful logic between multiple components without duplicating code."
  },
  {
    "id": 4,
    "question": "What is the difference between controlled and uncontrolled components? Which one is better?",
    "answer": "Controlled components are form elements that are managed by React state, while uncontrolled components store their data in the DOM itself. Controlled components are generally better for validation and predictable state management, but uncontrolled ones can be simpler for basic use cases."
  },
  {
    "id": 5,
    "question": "Tell us something about `useFormStatus()`.",
    "answer": "`useFormStatus()` is a React Hook that provides real-time information about a form’s submission state — such as whether it’s currently submitting or has finished. It’s useful for showing loading indicators or disabling buttons while the form is being submitted, especially in React Server Components."
  }
]
